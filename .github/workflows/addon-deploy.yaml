---
name: Deploy

concurrency:
  group: queue

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      addon:
        description: Overrides detected changed addons
        required: false
        type: string
      slug:
        description: Overrides detected slug (for all addons built this run)
        required: false
        type: string
      repository:
        default: "repository"
        description: The name of the stable repository
        required: false
        type: string
      repository_edge:
        default: "repository-edge"
        description: The name of the edge repository
        required: false
        type: string
      repository_beta:
        default: "repository-beta"
        description: The name of the beta repository
        required: false
        type: string
    secrets:
      DISPATCH_TOKEN:
        required: true
env:
  MONITORED_FILES: "build.yaml build.json config.yaml config.json Dockerfile rootfs"

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      addons: ${{ steps.changed_addons.outputs.all_addons_json }}
      changed_addons: ${{ steps.changed_addons.outputs.changed_addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_files
        continue-on-error: true
        uses: jitterbit/get-changed-files@v1

      - name: Find add-on directories
        id: addons
        uses: home-assistant/actions/helpers/find-addons@master

      - name: Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons_list  # Renamed for clarity and consistency
          declare -a all_addons

          for addon in ${{ steps.addons.outputs.addons }}; do
            if [[ ! "${all_addons[@]}" =~ $addon ]]; then
              all_addons+=("\"${addon}\",");
            fi

            # Check for changes in monitored files in this add-on
            if [[ "${{ steps.changed_files.outcome == 'success' && steps.changed_files.outputs.all || '' }}" =~ $addon ]]; then
              for file in ${{ env.MONITORED_FILES }}; do
                  if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon/$file ]]; then
                    if [[ ! "${changed_addons_list[@]}" =~ $addon ]]; then # Use renamed variable
                      changed_addons_list+=("\"${addon}\","); # Use renamed variable
                    fi
                  fi
              done
            fi
          done

          # Prepare JSON array string for all addons
          all_addons_json_string=$(echo "${all_addons[@]}" | sed 's/,$//')
          if [[ -n "${all_addons_json_string}" ]]; then
            echo "all_addons_json=[${all_addons_json_string}]" | tee -a "$GITHUB_OUTPUT"
          else
            echo "all_addons_json=[]" | tee -a "$GITHUB_OUTPUT"
          fi

          # Prepare JSON array string for changed addons and set 'changed' flag
          changed_addons_json_string=$(echo "${changed_addons_list[@]}" | sed 's/,$//') # Use renamed variable
          if [[ -n "${changed_addons_json_string}" ]]; then
            echo "Changed add-ons: [${changed_addons_json_string}]";
            echo "changed=true" | tee -a "$GITHUB_OUTPUT";
            echo "changed_addons=[${changed_addons_json_string}]" | tee -a "$GITHUB_OUTPUT";
          else
            echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
            echo "changed=false" | tee -a "$GITHUB_OUTPUT"; # Explicitly set changed to false
            echo "changed_addons=[]" | tee -a "$GITHUB_OUTPUT"; # Output empty array for changed_addons if none
          fi
  information:
    if: |
      github.event_name == 'release'
      || (
        github.event_name == 'workflow_run'
        && github.event.workflow_run.conclusion == 'success'
      )
    name: ℹ️ Gather add-on information
    runs-on: ubuntu-latest
    needs:
      - init
    outputs:
      # These will be JSON arrays of strings. e.g., targets_list_json will be '["./addon1", "./addon2"]'
      # architectures_list_json will be an array of JSON strings, e.g., '["[\"amd64\",\"armv7\"]", "[\"aarch64\"]"]'
      architectures_list_json: ${{ steps.collect_info.outputs.architectures_list_json }}
      # base_image_signers_list_json: ${{ steps.collect_info.outputs.base_image_signers_list_json }} # Placeholder, not fully implemented
      build_files_list_json: ${{ steps.collect_info.outputs.build_files_list_json }}
      descriptions_list_json: ${{ steps.collect_info.outputs.descriptions_list_json }}
      names_list_json: ${{ steps.collect_info.outputs.names_list_json }}
      slugs_list_json: ${{ steps.collect_info.outputs.slugs_list_json }}
      targets_list_json: ${{ steps.collect_info.outputs.targets_list_json }}
      versions_list_json: ${{ steps.collect_info.outputs.versions_list_json }}
      envs_list_json: ${{ steps.collect_info.outputs.envs_list_json }}
      environment: ${{ steps.collect_info.outputs.environment }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4

      - name: Determine addons to process and collect information
        id: collect_info
        run: |
          sha="${{ github.sha }}"
          tasked_addons_json_array_string='${{ inputs.addon && format('["{0}"]', inputs.addon) || (needs.init.outputs.changed == 'true' && needs.init.outputs.changed_addons) || (needs.init.outputs.addons && needs.init.outputs.addons) || '[]' }}'

          echo "Tasked addons JSON string: $tasked_addons_json_array_string"
          mapfile -t addons_to_process < <(echo "$tasked_addons_json_array_string" | jq -r '.[]')

          declare -a all_slugs_arr all_targets_arr all_names_arr \
            all_descriptions_arr all_architectures_arr all_build_files_arr \
            all_versions_arr all_envs_arr # all_base_image_signers_arr

          # Environment is the same for each addon
          environment="edge"
          if [[ "${{ github.event_name }}" == "release" ]]; then
            environment="stable"
            if [[ "${{ github.event.release.prerelease }}" = "true" ]]; then
              environment="beta"
            fi
          else
            environment="edge"
          fi
          echo "environment=$environment" | tee -a "$GITHUB_OUTPUT"

          if [ ${#addons_to_process[@]} -eq 0 ]; then
            echo "No addons to process."
          else
            for addon_slug in "${addons_to_process[@]}"; do
              echo "Processing addon: $addon_slug"
              addon_path="./$addon_slug"
              config_file="$addon_path/config.yaml"
              build_file_path_convention="$addon_path/build.yaml"

              if [ ! -f "$config_file" ]; then
                echo "::warning::Config file $config_file not found for addon $addon_slug. Skipping."
                continue
              fi

              current_slug_from_config=$(yq eval '.slug' "$config_file")
              # Use inputs.slug to override for all, otherwise use slug from config
              final_slug="${{ inputs.slug || '$current_slug_from_config' }}"

              current_ver_from_config=$(yq eval '.version' "$config_file")
              if [[ "${{ github.event_name }}" == "release" ]]; then
                # NOTE: (dcode) If I split these addons to separate repos, switch back to tag name
                #version="${{ github.event.release.tag_name }}"
                # For monorepo, use addon version from config
                version="${current_ver_from_config}"
                version="${version,,}"
                version="${version#v}"
              else
                version="${sha:0:7}"
              fi

              all_slugs_arr+=("$(jq -cn --arg s "$final_slug" '$s')")
              all_versions_arr+=("$(jq -cn --arg s "$version" '$s')")
              all_envs_arr+=("$(jq -cn --arg s "$environment" '$s')")
              all_targets_arr+=("$(jq -cn --arg s "$addon_path" '$s')")
              all_names_arr+=("$(jq -cn --arg s "$(yq eval '.name' "$config_file")" '$s')")
              all_descriptions_arr+=("$(jq -cn --arg s "$(yq eval '.description' "$config_file")" '$s')")
              # .arch is an array in yaml, to_json converts it to a JSON array string e.g. "[\"amd64\",\"armv7\"]"
              all_architectures_arr+=("$(yq eval '.arch | to_json' "$config_file" | jq -c .)")
              all_build_files_arr+=("$(jq -cn --arg s "$build_file_path_convention" '$s')")

              # all_base_image_signers_arr+=("$(jq -cn --arg s "signer_for_${final_slug}" '$s')") # Placeholder
            done
          fi

          # Output each collected list as a JSON array string
          echo "slugs_list_json=$(IFS=,; echo "[${all_slugs_arr[*]}]")" | tee -a "$GITHUB_OUTPUT"
          echo "versions_list_json=$(IFS=,; echo "[${all_versions_arr[*]}]")" | tee -a "$GITHUB_OUTPUT"
          echo "envs_list_json=$(IFS=,; echo "[${all_envs_arr[*]}]")" | tee -a "$GITHUB_OUTPUT"
          echo "targets_list_json=$(IFS=,; echo "[${all_targets_arr[*]}]")" | tee -a "$GITHUB_OUTPUT"
          echo "names_list_json=$(IFS=,; echo "[${all_names_arr[*]}]")" | tee -a "$GITHUB_OUTPUT"
          echo "descriptions_list_json=$(IFS=,; echo "[${all_descriptions_arr[*]}]")" | tee -a "$GITHUB_OUTPUT"
          echo "architectures_list_json=$(IFS=,; echo "[${all_architectures_arr[*]}]")" | tee -a "$GITHUB_OUTPUT" # This is an array of JSON strings
          echo "build_files_list_json=$(IFS=,; echo "[${all_build_files_arr[*]}]")" | tee -a "$GITHUB_OUTPUT"
          # echo "base_image_signers_list_json=$(IFS=,; echo "[${all_base_image_signers_arr[*]}]")" | tee -a "$GITHUB_OUTPUT"
  build_matrix:
    name: Generate Build Matrix
    runs-on: "ubuntu-latest"
    needs: information
    outputs:
      build_matrix: ${{ steps.generate.outputs.matrix_json }}
      manifest_matrix: ${{ steps.generate.outputs.manifest_matrix_json }}
    steps:
      - name: Generate matrix per addon information output
        id: generate
        run: |
          set -eo pipefail
          final_matrix_array="[]"
          manifest_matrix_array="[]"

          # These are now JSON arrays of strings from the 'information' job
          slugs_list_json='${{ needs.information.outputs.slugs_list_json }}'
          targets_list_json='${{ needs.information.outputs.targets_list_json }}'
          names_list_json='${{ needs.information.outputs.names_list_json }}'
          descriptions_list_json='${{ needs.information.outputs.descriptions_list_json }}'
          versions_list_json='${{ needs.information.outputs.versions_list_json }}'
          envs_list_json='${{ needs.information.outputs.envs_list_json }}'
          # architectures_list_json is an array of JSON strings, where each string is an array of architectures for an addon
          # e.g., '["[\"amd64\",\"armv7\"]", "[\"aarch64\"]"]'
          architectures_list_of_json_arrays_str='${{ needs.information.outputs.architectures_list_json }}'
          build_files_list_json='${{ needs.information.outputs.build_files_list_json }}'

          declare -a slugs_arr targets_arr names_arr descriptions_arr \
            versions_arr envs_arr arch_lists_arr build_files_arr

          mapfile -t slugs_arr < <(echo "$slugs_list_json" | jq -r '.[]')
          mapfile -t versions_arr < <(echo "$versions_list_json" | jq -r '.[]')
          mapfile -t envs_arr < <(echo "$envs_list_json" | jq -r '.[]')
          mapfile -t targets_arr < <(echo "$targets_list_json" | jq -r '.[]')
          mapfile -t names_arr < <(echo "$names_list_json" | jq -r '.[]')
          mapfile -t descriptions_arr < <(echo "$descriptions_list_json" | jq -r '.[]')
          # Each element of arch_lists_arr will be a JSON string like "[\"amd64\",\"armv7\"]"
          mapfile -t arch_lists_arr < <(echo "$architectures_list_of_json_arrays_str" | jq -c '.[]')
          mapfile -t build_files_arr < <(echo "$build_files_list_json" | jq -r '.[]')

          for i in "${!slugs_arr[@]}"; do
            current_slug="${slugs_arr[$i]}"
            current_target="${targets_arr[$i]}"
            current_name="${names_arr[$i]}"
            current_desc="${descriptions_arr[$i]}"
            current_version="${versions_arr[$i]}"
            current_env="${envs_arr[$i]}"

            current_build_file_path="${build_files_arr[$i]}" # This is the filename, e.g., "myaddon/build.yaml"
            current_arch_list_json_str="${arch_lists_arr[$i]}"

            # Create the addon_info object for this addon
            addon_info_object=$(jq -cn \
              --arg slug "$current_slug" \
              --arg target "$current_target" \
              --arg name "$current_name" \
              --arg description "$current_desc" \
              --arg version "$current_version" \
              --arg env "$current_env" \
              --arg build_file "$current_build_file_path" \
              '{
                "slug": $slug,
                "target": $target,
                "name": $name,
                "description": $description,
                "version": $version,
                "environment": $env,
                "build_file": $build_file
              }')

            # Add this addon_info_object to the manifest_matrix_array
            manifest_matrix_array=$(echo "$manifest_matrix_array" | jq -c --argjson entry "$addon_info_object" '. + [$entry]')

            mapfile -t current_addon_architectures < <(echo "$current_arch_list_json_str" | jq -r '.[]')

            if [ ${#current_addon_architectures[@]} -eq 0 ]; then
              echo "Warning: Addon $current_slug has no architectures from $current_arch_list_json_str. Skipping for deploy matrix entries."
              # Continue to next addon, manifest_matrix_array already has the addon_info
              continue # for the outer loop if necessary, or just skip the inner arch loop
            fi

            for arch in "${current_addon_architectures[@]}"; do
            deploy_matrix_entry=$(jq -cn \
              --argjson addon_info "$addon_info_object" \
              --arg architecture "$arch" \
              '{
                "addon_info": $addon_info,
                "architecture": $architecture
              }')
            final_matrix_array=$(echo "$final_matrix_array" | jq -c --argjson entry "$deploy_matrix_entry" '. + [$entry]')
            done
          done
          echo "matrix_json=$final_matrix_array" | tee -a $GITHUB_OUTPUT
          echo "manifest_matrix_json=$manifest_matrix_array" | tee -a $GITHUB_OUTPUT
  deploy:
    name: 👷 Build & Deploy ${{ matrix.addon_info.name }} (${{ matrix.architecture }})
    needs:
      - build_matrix
    runs-on: ${{ contains(fromJson('["armhf", "armv7", "aarch64"]'), matrix.architecture) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.build_matrix.outputs.build_matrix) }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🏗 Set up build cache
        id: cache
        uses: actions/cache@v4.2.3
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.architecture }}
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" | tee -a "$GITHUB_OUTPUT"
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "${{ matrix.addon_info.build_file }}")
          echo "from=${from}" | tee -a "$GITHUB_OUTPUT"

          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "platform=linux/amd64" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "platform=linux/386" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" | tee -a "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: 🏗  Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Compose build args
        id: buildargs
        run: |
          set -eo pipefail

          COMBINED_ARGS_TEMP_FILE=$(mktemp)
          # Ensure cleanup on exit, even if script fails
          trap 'rm -f "$COMBINED_ARGS_TEMP_FILE"' EXIT

          {
            # Part 1: Args from build config (matrix.addon_info.build_file)
            # yq extracts the .args map from the JSON string, formats as 'key: value' lines, then sed converts to 'key=value'.
            yq --no-colors '.args | to_entries | .[] | .key + ": " + .value' "${{ matrix.addon_info.build_file }}" | sed -r 's#: #=#' > "$COMBINED_ARGS_TEMP_FILE"

            # Part 2: Static args
            echo "BUILD_ARCH=${{ matrix.architecture }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_DATE=${{ steps.flags.outputs.date }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_DESCRIPTION=${{ matrix.addon_info.description }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_FROM=${{ steps.flags.outputs.from }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_NAME=${{ matrix.addon_info.name }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_REF=${{ github.sha }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_REPOSITORY=${{ github.repository }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_VERSION=${{ matrix.addon_info.version }}" >> "$COMBINED_ARGS_TEMP_FILE"

          } > "$COMBINED_ARGS_TEMP_FILE"

          # Output the content of COMBINED_ARGS_TEMP_FILE as a multiline string,
          # after filtering out blank lines.
          echo "args<<ARGS_EOF" | tee -a "$GITHUB_OUTPUT"
          awk 'NF' "$COMBINED_ARGS_TEMP_FILE" | tee -a "$GITHUB_OUTPUT" # NF filters out blank lines
          echo "ARGS_EOF" | tee -a "$GITHUB_OUTPUT"
      - name: ⤵️ Download base image
        if: steps.flags.outputs.from != 'null'
        run: docker pull "${{ steps.flags.outputs.from }}"
      - name: 🚀 Build
        uses: docker/build-push-action@v6.18.0
        with:
          load: true
          # yamllint disable rule:line-length
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.addon_info.slug }}/${{ matrix.architecture }}:${{ matrix.addon_info.environment }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.addon_info.slug }}/${{ matrix.architecture }}:${{ matrix.addon_info.version }}
          # yamllint enable rule:line-length
          context: ${{ matrix.addon_info.target }}
          file: ${{ matrix.addon_info.target }}/Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/${{ github.repository_owner }}/${{ matrix.addon_info.slug }}/${{ matrix.architecture }}:edge
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: ${{ steps.buildargs.outputs.args }}

      # This ugly bit is necessary, or our cache will grow forever...
      # Well until we hit GitHub's limit of 5GB :)
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: 🚚 Swap build cache
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache
      - name: 🚀 Push
        # yamllint disable rule:line-length
        run: |
          docker push \
            "ghcr.io/${{ github.repository_owner }}/${{ matrix.addon_info.slug }}/${{ matrix.architecture }}:${{ matrix.addon_info.environment }}"
          docker push \
            "ghcr.io/${{ github.repository_owner }}/${{ matrix.addon_info.slug }}/${{ matrix.architecture }}:${{ matrix.addon_info.version }}"
  manifest:
    name: 👷 Build & Deploy Multi Arch Manifest
    needs:
      - build_matrix
      - deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Each item in this matrix is an addon_info_object
        addon_config: ${{ fromJson(needs.build_matrix.outputs.manifest_matrix) }}
    outputs:
      # Output the addon_info object as a JSON string for downstream jobs
      addon_info: ${{ toJson(matrix.addon_config) }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
      - name: 🚀 Create manifest
        env:
          # Pass the full deploy matrix to easily find architectures for the current addon
          DEPLOY_MATRIX_JSON: ${{ needs.build_matrix.outputs.build_matrix }}
          CURRENT_ADDON_SLUG: ${{ matrix.addon_config.slug }}
          CURRENT_ADDON_VERSION: ${{ matrix.addon_config.version }}
          CURRENT_ADDON_ENVIRONMENT: ${{ matrix.addon_config.environment }}
          GH_REPOSITORY_OWNER: ${{ github.repository_owner }}
        shell: bash
        # yamllint disable rule:line-length
        run: |
          declare -a images

          # Extract architectures for the current addon from the deploy matrix
          mapfile -t architectures_for_addon < <( \
            echo "$DEPLOY_MATRIX_JSON" | \
            jq -r --arg slug "$CURRENT_ADDON_SLUG" '.[] | select(.addon_info.slug == $slug) | .architecture' \
          )

          if [ ${#architectures_for_addon[@]} -eq 0 ]; then
            echo "::error::No architectures found for addon $CURRENT_ADDON_SLUG in the deploy matrix."
            exit 1
          fi

          for architecture_value in "${architectures_for_addon[@]}"; do
            images+=("ghcr.io/$GH_REPOSITORY_OWNER/$CURRENT_ADDON_SLUG/${architecture_value}:$CURRENT_ADDON_VERSION")
          done

          docker manifest create \
            "ghcr.io/$GH_REPOSITORY_OWNER/$CURRENT_ADDON_SLUG:$CURRENT_ADDON_ENVIRONMENT" \
            "${images[@]}"

          docker manifest create \
            "ghcr.io/$GH_REPOSITORY_OWNER/$CURRENT_ADDON_SLUG:$CURRENT_ADDON_VERSION" \
            "${images[@]}"

      - name: 🏗  Login to GitHub Container Registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Push
        env:
          CURRENT_ADDON_SLUG: ${{ matrix.addon_config.slug }}
          CURRENT_ADDON_VERSION: ${{ matrix.addon_config.version }}
          CURRENT_ADDON_ENVIRONMENT: ${{ matrix.addon_config.environment }}
          GH_REPOSITORY_OWNER: ${{ github.repository_owner }}
        # yamllint disable rule:line-length
        run: |
          docker manifest push \
            "ghcr.io/$GH_REPOSITORY_OWNER/$CURRENT_ADDON_SLUG:$CURRENT_ADDON_ENVIRONMENT"
          docker manifest push \
            "ghcr.io/$GH_REPOSITORY_OWNER/$CURRENT_ADDON_SLUG:$CURRENT_ADDON_VERSION"

  # Skipping publish jobs for now
  publish-edge:
    name: 📢 Publish to edge repository
    if: false && needs.information.outputs.environment == 'edge'
    needs:
      - information
      - deploy
      - manifest
    strategy:
      matrix: # This matrix will now correctly receive one addon_info object per addon
        addon_info_json: ["${{ needs.manifest.outputs.addon_info }}"] # The output is a single JSON string per manifest job run
    environment:
      name: ${{ needs.information.outputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Dispatch repository updater update signal
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          token: ${{ secrets.DISPATCH_TOKEN }}
          repository: ${{ github.repository_owner }}/${{ inputs.repository_edge }}
          event-type: update
          client-payload: >
            {
              "addon": "${{ fromJson(matrix.addon_info_json).slug }}",
              "name": "${{ fromJson(matrix.addon_info_json).slug }}",
              "repository": "${{ github.repository }}",
              "version": "${{ fromJson(matrix.addon_info_json).version }}"
            }

  publish-beta:
    name: 📢 Publish to beta repository
    if: |
      false &&
      (
        needs.information.outputs.environment == 'beta' ||
        needs.information.outputs.environment == 'stable'
      )
    needs:
      - information
      - deploy
      - manifest
    strategy:
      matrix: # This matrix will now correctly receive one addon_info object per addon
        addon_info_json: ["${{ needs.manifest.outputs.addon_info }}"]
    environment:
      name: ${{ needs.information.outputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Dispatch repository updater update signal
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          token: ${{ secrets.DISPATCH_TOKEN }}
          repository: ${{ github.repository_owner }}/${{ inputs.repository_beta }}
          event-type: update
          client-payload: >
            {
              "addon": "${{ fromJson(matrix.addon_info_json).slug }}",
              "name": "${{ fromJson(matrix.addon_info_json).slug }}",
              "repository": "${{ github.repository }}",
              "version": "${{ github.event.release.tag_name }}"
            }

  publish-stable:
    name: 📢 Publish to stable repository
    if: false && needs.information.outputs.environment == 'stable'
    needs:
      - information
      - deploy
      - manifest
    strategy:
      matrix: # This matrix will now correctly receive one addon_info object per addon
        addon_info_json: ["${{ needs.manifest.outputs.addon_info }}"]
    environment:
      name: ${{ needs.information.outputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Dispatch repository updater update signal
        uses: peter-evans/repository-dispatch@v3.0.0
        with:
          token: ${{ secrets.DISPATCH_TOKEN }}
          repository: ${{ github.repository_owner }}/${{ inputs.repository }}
          event-type: update
          client-payload: >
            {
              "addon": "${{ fromJson(matrix.addon_info_json).slug }}",
              "name": "${{ fromJson(matrix.addon_info_json).slug }}",
              "repository": "${{ github.repository }}",
              "version": "${{ github.event.release.tag_name }}"
            }
