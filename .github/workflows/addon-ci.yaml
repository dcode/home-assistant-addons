---
name: CI

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      addon:
        description: Overrides detected changed addons
        required: false
        type: string
      slug:
        description: Overrides detected slug (for all addons built this run)
        required: false
        type: string
env:
  MONITORED_FILES: "build.yaml build.json config.yaml config.json Dockerfile rootfs"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      addons: ${{ steps.changed_addons.outputs.all_addons_json }}
      changed_addons: ${{ steps.changed_addons.outputs.changed_addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1

      - name: Find add-on directories
        id: addons
        uses: home-assistant/actions/helpers/find-addons@master

      - name: Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          declare -a all_addons

          for addon in ${{ steps.addons.outputs.addons }}; do
            if [[ ! "${all_addons[@]}" =~ $addon ]]; then
              all_addons+=("\"${addon}\",");
            fi

            # Check for changes in monitored files in this add-on
            if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon ]]; then
              for file in ${{ env.MONITORED_FILES }}; do
                  if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon/$file ]]; then
                    if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                      changed_addons+=("\"${addon}\",");
                    fi
                  fi
              done
            fi
          done

          # Prepare JSON array string for all addons
          all_addons_json_string=$(echo "${all_addons[@]}" | sed 's/,$//')
          if [[ -n "${all_addons_json_string}" ]]; then
            echo "all_addons_json=[${all_addons_json_string}]" | tee -a "$GITHUB_OUTPUT"
          else
            echo "all_addons_json=[]" | tee -a "$GITHUB_OUTPUT"
          fi

          # Prepare JSON array string for changed addons and set 'changed' flag
          changed_addons_json_string=$(echo "${changed_addons_array[@]}" | sed 's/,$//')
          if [[ -n "${changed_addons_json_string}" ]]; then
            echo "Changed add-ons: [${changed_addons_json_string}]";
            echo "changed=true" | tee -a "$GITHUB_OUTPUT";
            echo "changed_addons=[${changed_addons_json_string}]" | tee -a "$GITHUB_OUTPUT";
          else
            echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
            echo "changed=false" | tee -a "$GITHUB_OUTPUT"; # Explicitly set changed to false
            echo "changed_addons=[]" | tee -a "$GITHUB_OUTPUT"; # Output empty array for changed_addons if none
          fi
  debug:
    name: Debug the selected addon job values
    runs-on: ubuntu-latest
    needs:
      - init
    steps:
      - name: Dump init context
        run: |
          echo "Input addon: ${{ inputs.addon }}"
          echo "All Addons: ${{ needs.init.outputs.addons }}"
          echo "Changed Addons: ${{ needs.init.outputs.changed_addons }}"
          echo "Changed: ${{ needs.init.outputs.changed }}"
          echo "Tasked Addons ${{ inputs.addon && format('["{0}"]', inputs.addon) || (needs.init.outputs.changed == 'true' && needs.init.outputs.changed_addons) || (needs.init.outputs.addons && needs.init.outputs.addons) || '[]' }}"

  information:
    name: Gather add-on information for selected add-ons
    runs-on: ubuntu-latest
    needs:
      - init
    strategy:
      matrix:
        addon: ${{ inputs.addon && fromJson(format('["{0}"]', inputs.addon)) || (needs.init.outputs.changed == 'true' && fromJson(needs.init.outputs.changed_addons)) || (needs.init.outputs.addons && fromJson(needs.init.outputs.addons)) || fromJson('[]') }}
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      base_image_signer: ${{ steps.information.outputs.codenotary_base_image }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.override.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1.4.2
        with:
          path: "./${{matrix.addon}}"
      - name: üöÄ Process possible slug override
        id: override
        run: |
          slug="${{ steps.information.outputs.slug }}"
          if [[ ! -z "${{ inputs.slug }}" ]]; then
            slug="${{ inputs.slug }}"
          fi
          echo "slug=$slug" | tee -a "$GITHUB_OUTPUT"

  lint-addon:
    name: Lint Add-on
    needs:
      - information
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run Add-on Lint
        uses: frenck/action-addon-linter@v2.18.0
        with:
          community: true
          path: "./${{ needs.information.outputs.target }}"

  lint-hadolint:
    name: Hadolint
    needs:
      - information
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run Hadolint
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: "./${{ needs.information.outputs.target }}/Dockerfile"

  lint-json:
    name: JSON Lint
    runs-on: ubuntu-latest
    needs:
      - information
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run JQ
        run: |
          shopt -s globstar
          cat "${{ needs.information.outputs.target }}/**/*.json" | jq '.'

  lint-shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    needs:
      - information
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run Shellcheck
        uses: ludeeus/action-shellcheck@2.0.0
        env:
          SHELLCHECK_OPTS: -s bash
        with:
          scandir: ${{ needs.information.outputs.target }}

  lint-yamllint:
    name: YAMLLint
    runs-on: ubuntu-latest
    needs:
      - information
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run YAMLLint
        uses: frenck/action-yamllint@v1.5
        with:
          path: ${{ needs.information.outputs.target }}

  lint-prettier:
    name: Prettier
    runs-on: ubuntu-latest
    needs:
      - information
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run Prettier
        uses: creyD/prettier_action@v4.5
        with:
          prettier_options: --write ${{ needs.information.outputs.target }}/**/*.{json,js,md,yaml}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build_matrix:
    name: Generate Build Matrix
    runs-on: "ubuntu-latest"
    needs: information
    outputs:
      build_matrix: ${{ steps.generate.outputs.matrix_json }}
    steps:
      - name: Generate matrix per addon information output
        id: generate
        run: |
          matrix_array="[]"

          # Create a bash array from the architectures JSON array string
          mapfile -t current_architectures < <(echo "${{ needs.information.outputs.architectures }}" | jq -r '.[]')

          current_slug="${{ needs.information.outputs.slug }}"
          current_target="${{ needs.information.outputs.target }}"
          current_name="${{ needs.information.outputs.name }}"
          current_desc="${{ needs.information.outputs.description }}"
          current_build="${{ needs.information.outputs.build }}"

          # Iterate over each architecture to generate a build matrix entry for this addon
          for arch in $current_architectures; do
            matrix_entry=$(jq -cn \
              --arg slug "$current_slug" \
              --arg target "$current_target" \
              --arg name "$current_name" \
              --arg description "$current_desc" \
              --arg architecture "$arch" \
              --arg build_config "$current_build" \
              '{
                "addon_info": {
                  "slug": $slug,
                  "target": $target,
                  "name": $name,
                  "description": $description,
                  "build": $build_config
                },
                "architecture": $architecture
              }')
            matrix_array=$(echo "$matrix_array" | jq --argjson entry "$matrix_entry" '. + [$entry]')
          done

          echo "matrix_json=$matrix_array" | tee -a $GITHUB_OUTPUT
  build:
    name: Build ${{ matrix.addon_info.name }} (${{ matrix.architecture }})
    needs:
      - build_matrix
      - lint-addon
      - lint-hadolint
      - lint-json
      - lint-prettier
      - lint-shellcheck
      - lint-yamllint
    runs-on: ${{ contains(fromJson('["armhf", "armv7", "aarch64"]'), matrix.architecture) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      matrix:
        include: ${{ fromJson(needs.build_matrix.outputs.build_matrix) }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üèó Set up build cache
        id: cache
        uses: actions/cache@v4.2.3
        with:
          path: /tmp/.docker-cache # Cache path
          key: docker-${{ matrix.addon_info.slug }}-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.addon_info.slug }}-${{ matrix.architecture }}
      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
      - name: ‚ÑπÔ∏è Compose build flags
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" | tee -a "$GITHUB_OUTPUT"
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "${{ matrix.addon_info.build }}")
          echo "from=${from}" | tee -a "$GITHUB_OUTPUT"

          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "platform=linux/amd64" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "platform=linux/386" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" | tee -a "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: Compose build args
        id: buildargs
        run: |
          set -eo pipefail

          COMBINED_ARGS_TEMP_FILE=$(mktemp)
          # Ensure cleanup on exit, even if script fails
          trap 'rm -f "$COMBINED_ARGS_TEMP_FILE"' EXIT

          {
            # Part 1: Args from build config (matrix.addon_info.build)
            # yq extracts the .args map from the JSON string, formats as 'key: value' lines, then sed converts to 'key=value'.
            echo "${{ matrix.addon_info.build }}" | yq --no-colors '.args | to_entries | .[] | .key + ": " + .value' | sed -r 's#: #=#' > "$COMBINED_ARGS_TEMP_FILE"

            # Part 2: Static args
            echo "BUILD_ARCH=${{ matrix.architecture }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_DATE=${{ steps.flags.outputs.date }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_DESCRIPTION=${{ matrix.addon_info.description }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_FROM=${{ steps.flags.outputs.from }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_NAME=${{ matrix.addon_info.name }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_REF=${{ github.sha }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_REPOSITORY=${{ github.repository }}" >> "$COMBINED_ARGS_TEMP_FILE"
            echo "BUILD_VERSION=edge" >> "$COMBINED_ARGS_TEMP_FILE"

          } > "$COMBINED_ARGS_TEMP_FILE"

          echo -n "args=" | tee -a "$GITHUB_OUTPUT"
          # Filter out any blank lines from the final list of arguments
          awk 'NF' "$COMBINED_ARGS_TEMP_FILE" | tee -a "$GITHUB_OUTPUT"
      - name: ‚§µÔ∏è Download base image
        if: steps.flags.outputs.from != 'null'
        run: docker pull "${{ steps.flags.outputs.from }}"
      - name: üöÄ Build
        uses: docker/build-push-action@v6.18.0
        with:
          push: false
          context: ${{ matrix.addon_info.target }}
          file: ${{ matrix.addon_info.target }}/Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/${{ github.repository_owner }}/${{ matrix.addon_info.slug }}/${{ matrix.architecture }}:edge
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: ${{ steps.buildargs.outputs.args }}

      # This ugly bit is necessary, or our cache will grow forever...
      # Well until we hit GitHub's limit of 5GB :)
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: üöö Swap build cache
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache
