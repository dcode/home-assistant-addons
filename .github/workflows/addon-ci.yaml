---
name: CI

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      slug:
        description: Overrides the detected slug
        required: false
        type: string
env:
  MONITORED_FILES: "build.yaml build.json config.yaml config.json Dockerfile rootfs"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  init:
    runs-on: ubuntu-latest
    name: Initialize builds
    outputs:
      changed_addons: ${{ steps.changed_addons.outputs.addons }}
      changed: ${{ steps.changed_addons.outputs.changed }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Get changed files
        id: changed_files
        uses: jitterbit/get-changed-files@v1

      - name: Find add-on directories
        id: addons
        uses: home-assistant/actions/helpers/find-addons@master

      - name: Get changed add-ons
        id: changed_addons
        run: |
          declare -a changed_addons
          for addon in ${{ steps.addons.outputs.addons }}; do
            if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon ]]; then
              for file in ${{ env.MONITORED_FILES }}; do
                  if [[ "${{ steps.changed_files.outputs.all }}" =~ $addon/$file ]]; then
                    if [[ ! "${changed_addons[@]}" =~ $addon ]]; then
                      changed_addons+=("\"${addon}\",");
                    fi
                  fi
              done
            fi
          done

          changed=$(echo ${changed_addons[@]} | rev | cut -c 2- | rev)

          if [[ -n ${changed} ]]; then
            echo "Changed add-ons: $changed";
            echo "changed=true" >> $GITHUB_OUTPUT;
            echo "addons=[$changed]" >> $GITHUB_OUTPUT;
          else
            echo "No add-on had any monitored files changed (${{ env.MONITORED_FILES }})";
          fi
  information:
    name: Gather add-on information
    runs-on: ubuntu-latest
    needs:
      - init
    strategy:
      matrix:
        addon: ${{ fromJson(needs.init.outputs.changed_addons) }}
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      base_image_signer: ${{ steps.information.outputs.codenotary_base_image }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.override.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1.4.2
        with:
          path: "./${{matrix.addon}}"
      - name: üöÄ Process possible slug override
        id: override
        run: |
          slug="${{ steps.information.outputs.slug }}"
          if [[ ! -z "${{ inputs.slug }}" ]]; then
            slug="${{ inputs.slug }}"
          fi
          echo "slug=$slug" >> "$GITHUB_OUTPUT"

  lint-addon:
    name: Lint Add-on
    needs:
      - information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ${{ fromJson(needs.information.outputs.target) }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run Add-on Lint
        uses: frenck/action-addon-linter@v2.18.0
        with:
          community: true
          path: "./${{ matrix.target }}"

  lint-hadolint:
    name: Hadolint
    needs:
      - information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: ${{ fromJson(needs.information.outputs.target) }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run Hadolint
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: "./${{ matrix.target }}/Dockerfile"

  lint-json:
    name: JSON Lint
    runs-on: ubuntu-latest
    needs:
      - information
    strategy:
      matrix:
        target: ${{ fromJson(needs.information.outputs.target) }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run JQ
        run: |
          shopt -s globstar
          cat "${{matrix.target}}/**/*.json" | jq '.'

  lint-shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    needs:
      - information
    strategy:
      matrix:
        addon: ${{ fromJson(needs.information.outputs)}}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run Shellcheck
        uses: ludeeus/action-shellcheck@2.0.0
        env:
          SHELLCHECK_OPTS: -s bash
        with:
          scandir: ${{ matrix.addon.target }}

  lint-yamllint:
    name: YAMLLint
    runs-on: ubuntu-latest
    needs:
      - information
    strategy:
      matrix:
        addon: ${{ fromJson(needs.information.outputs)}}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run YAMLLint
        uses: frenck/action-yamllint@v1.5
        with:
          path: ${{ matrix.addon.target }}

  lint-prettier:
    name: Prettier
    runs-on: ubuntu-latest
    needs:
      - information
    strategy:
      matrix:
        addon: ${{ fromJson(needs.information.outputs)}}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üöÄ Run Prettier
        uses: creyD/prettier_action@v4.5
        with:
          prettier_options: --write ${{matrix.addon.target}}/**/*.{json,js,md,yaml}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build ${{ matrix.architecture }}
    needs:
      - information
      - lint-addon
      - lint-hadolint
      - lint-json
      - lint-prettier
      - lint-shellcheck
      - lint-yamllint
    runs-on: ${{ contains(fromJson('["armhf", "armv7", "aarch64"]'), matrix.architecture) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}
        addon: ${{ fromJson(needs.information.outputs) }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4
      - name: üèó Set up build cache
        id: cache
        uses: actions/cache@v4.2.3
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.architecture }}
      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
      - name: ‚ÑπÔ∏è Compose build flags
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "${{ matrix.addon }}/build.yaml")
          echo "from=${from}" >> "$GITHUB_OUTPUT"

          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: Compose build args
        id: buildargs
        run: |
          set -eo pipefail

          COMBINED_ARGS_TEMP_FILE=$(mktemp)
          # Ensure cleanup on exit, even if script fails
          trap 'rm -f "$COMBINED_ARGS_TEMP_FILE"' EXIT

          {
            # Part 1: Args from build.yaml (e.g., needs.information.outputs.build)
            # yq extracts the .args map, formats as 'key: value' lines, then sed converts to 'key=value'.
            # If '.args' is not present or empty in the build YAML, this command sequence produces no output and exits cleanly.
            yq --no-colors '.args | to_entries | .[] | .key + ": " + .value' "${{ matrix.addon }}/build.yaml" | sed -r 's#: #=#'

            # Part 2: Static args
            # Each echo adds a KEY=VALUE pair followed by a newline.
            echo "BUILD_ARCH=${{ matrix.architecture }}"
            echo "BUILD_DATE=${{ steps.flags.outputs.date }}"
            echo "BUILD_DESCRIPTION=${{ matrix.addon.description }}"
            echo "BUILD_FROM=${{ steps.flags.outputs.from }}"
            echo "BUILD_NAME=${{ matrix.addon.name }}"
            echo "BUILD_REF=${{ github.sha }}"
            echo "BUILD_REPOSITORY=${{ github.repository }}"
            echo "BUILD_VERSION=edge"
          } > "$COMBINED_ARGS_TEMP_FILE"

          echo -n "args=" >> "$GITHUB_OUTPUT"
          # Filter out any blank lines from the final list of arguments
          awk 'NF' "$COMBINED_ARGS_TEMP_FILE" >> "$GITHUB_OUTPUT"
      - name: ‚§µÔ∏è Download base image
        if: steps.flags.outputs.from != 'null'
        run: docker pull "${{ steps.flags.outputs.from }}"
      - name: üöÄ Build
        uses: docker/build-push-action@v6.18.0
        with:
          push: false
          context: ${{ matrix.addon.target }}
          file: ${{ matrix.addon.target }}/Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/${{ github.repository_owner }}/${{ matrix.addon.slug }}/${{ matrix.architecture }}:edge
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache-new
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: ${{ steps.buildargs.outputs.args }}

      # This ugly bit is necessary, or our cache will grow forever...
      # Well until we hit GitHub's limit of 5GB :)
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: üöö Swap build cache
        run: |
          rm -rf /tmp/.docker-cache
          mv /tmp/.docker-cache-new /tmp/.docker-cache
