---
name: CI
# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      slug:
        description: Overrides the detected slug
        required: false
        type: string
      addon_directory:
        description: Specifies the addon directory
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  information:
    name: Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      base_image_signer: ${{ steps.information.outputs.codenotary_base_image }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.override.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run add-on information action
        id: information
        uses: frenck/action-addon-information@v1.4.2
        with:
          path: "${{ inputs.addon_directory }}"

      - name: 🚀 Process possible slug override
        id: override
        run: |
          slug="${{ steps.information.outputs.slug }}"
          if [[ ! -z "${{ inputs.slug }}" ]]; then
            slug="${{ inputs.slug }}"
          fi
          echo "slug=$slug" >> "$GITHUB_OUTPUT"

  lint-addon:
    name: Lint Add-on
    needs:
      - information
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run Add-on Lint
        uses: frenck/action-addon-linter@v2.18.0
        with:
          community: true
          path: "./${{ needs.information.outputs.target }}"

  lint-hadolint:
    name: Hadolint
    needs:
      - information
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run Hadolint
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: "./${{ needs.information.outputs.target }}/Dockerfile"

  lint-json:
    name: JSON Lint
    runs-on: ubuntu-latest
    needs:
      - information
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run JQ
        run: |
          shopt -s globstar
          cat ${{ needs.information.outputs.target }}/**/*.json | jq '.'

  lint-shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    needs:
      - information
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run Shellcheck
        uses: ludeeus/action-shellcheck@2.0.0
        env:
          SHELLCHECK_OPTS: -s bash
        with:
          scandir: ${{ needs.information.outputs.target }}

  lint-yamllint:
    name: YAMLLint
    runs-on: ubuntu-latest
    needs:
      - information
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run YAMLLint
        uses: frenck/action-yamllint@v1.5
        with:
          path: ${{ needs.information.outputs.target }}

  lint-prettier:
    name: Prettier
    runs-on: ubuntu-latest
    needs:
      - information
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🚀 Run Prettier
        uses: dcode/prettier_action@master
        with:
          working_directory: ${{ needs.information.outputs.target }}
          prettier_options: --write **/*.{json,js,md,yaml}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build ${{ matrix.architecture }}
    needs:
      - information
      - lint-addon
      - lint-hadolint
      - lint-json
      - lint-prettier
      - lint-shellcheck
      - lint-yamllint
    # yamllint disable-line rule:line-length
    runs-on: ${{ contains(fromJson('["armhf", "armv7", "aarch64"]'), matrix.architecture) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.information.outputs.architectures) }}
    env:
      BUILD_YAML: "./${{ needs.information.outputs.target }}/build.yaml"
      BASHIO_VERSION: "v0.17.0"
      TARGET: "./${{ needs.information.outputs.target }}"
      BUILD_ARCH: "${{ matrix.architecture }}"
      YQ_VERSION: "v4.13.2"
      COSIGN_VERSION: "2.4.3"

    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🏗 Set up build cache
        id: cache
        uses: actions/cache@v4.2.3
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.architecture }}

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"
          from=$(yq --no-colors eval ".build_from.${{ matrix.architecture }}" "${{ needs.information.outputs.build }}")
          echo "from=${from}" >> "$GITHUB_OUTPUT"

          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "platform=linux/amd64" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "i386" ]]; then
            echo "platform=linux/386" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armhf" ]]; then
            echo "platform=linux/arm/v6" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "armv7" ]]; then
            echo "platform=linux/arm/v7" >> "$GITHUB_OUTPUT"
          elif [[ "${{ matrix.architecture }}" = "aarch64" ]]; then
            echo "platform=linux/arm64/v8" >> "$GITHUB_OUTPUT"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi

      - name: Update build.yaml with dynamic build args
        run: |
          echo "  BUILD_ARCH: ${{ matrix.architecture }}" >> "${BUILD_YAML}"
          echo "  BUILD_DATE: ${{ steps.flags.outputs.date }}" >> "${BUILD_YAML}"
          echo "  BUILD_DESCRIPTION: ${{ needs.information.outputs.description }}" >> "${BUILD_YAML}"
          echo "  BUILD_FROM: ${{ steps.flags.outputs.from }}" >> "${BUILD_YAML}"
          echo "  BUILD_NAME: ${{ needs.information.outputs.name }}" >> "${BUILD_YAML}"
          echo "  BUILD_REF: ${{ github.sha }}" >> "${BUILD_YAML}"
          echo "  BUILD_REPOSITORY: ${{ github.repository }}" >> "${BUILD_YAML}"
          echo "  BUILD_VERSION: edge" >> "${BUILD_YAML}"

      - name: Generate json configs
        shell: bash
        run: |
          set -euo pipefail
          declare YQ_URL COSIGN_URL
          set -o errexit  # Exit script when a command exits with non-zero status
          set -o errtrace # Exit on error inside any functions or sub-shells
          set -o nounset  # Exit script on use of an undefined variable
          set -o pipefail # Return exit status of the last command in the pipe that failed

          export __BASHIO_BIN
          export __BASHIO_LIB_DIR

          curl -J -L -o /tmp/bashio.tar.gz \
                  "https://github.com/hassio-addons/bashio/archive/${BASHIO_VERSION}.tar.gz"
          mkdir -p /tmp/bashio
          tar zxvf /tmp/bashio.tar.gz --strip 1 -C /tmp/bashio

          __BASHIO_BIN=$(readlink -f "/tmp/bashio/lib/bashio")
          __BASHIO_LIB_DIR=$(dirname "${__BASHIO_BIN}")
          # Include Bashio library
          # shellcheck source=lib/bashio.sh
          source "${__BASHIO_LIB_DIR}/bashio.sh"

          bashio::log.level trace

          if [ "${BUILD_ARCH}" = "armhf" ] || [ "${BUILD_ARCH}" = "armv7" ]; then
            YQ_URL="https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_arm";
            COSIGN_URL="https://github.com/home-assistant/cosign/releases/download/${COSIGN_VERSION}/cosign_armhf";
          elif [ "${BUILD_ARCH}" = "aarch64" ]; then
            YQ_URL="https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_arm64";
            COSIGN_URL="https://github.com/home-assistant/cosign/releases/download/${COSIGN_VERSION}/cosign_aarch64";
          elif [ "${BUILD_ARCH}" = "i386" ]; then
            YQ_URL="https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_386";
            COSIGN_URL="https://github.com/home-assistant/cosign/releases/download/${COSIGN_VERSION}/cosign_i386";
          elif [ "${BUILD_ARCH}" = "amd64" ]; then
            YQ_URL="https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64";
            COSIGN_URL="https://github.com/home-assistant/cosign/releases/download/${COSIGN_VERSION}/cosign_amd64";
          else
            exit 1;
          fi
          curl --no-progress-meter -o /tmp/yq "${YQ_URL}"
          curl --no-progress-meter -o /tmp/cosign "${COSIGN_URL}"
          chmod +x /tmp/yq
          chmod +x /tmp/cosign
          git config --global --add safe.directory "*"
          chmod 755 "${TARGET}"

          bashio::log.trace "downloaded tools: $(echo; ls -la /tmp/{yq,cosign})"
          bashio::log.trace "pwd: $(pwd)"
          bashio::log.trace "TARGET: ${TARGET}"
          bashio::log.trace "ls TARGET: $(ls -la ${TARGET})"

          # overrides
          for file in config build; do
            bashio::log.trace "Process ${file} files"
            if [ -f "${TARGET}/${file}.yml" ]; then
              bashio::log.trace "${file}.yml: $(cat "${TARGET}/${file}.yml")"
              bashio::log.trace "yq output: $(/tmp/yq e -N -M -o=json "${TARGET}/${file}.yml")"
              /tmp/yq e -N -M -o=json "${TARGET}/${file}.yml" | tee "${TARGET}/${file}.json"

            elif [ -f "${TARGET}/${file}.yaml" ]; then
              bashio::log.trace "${file}.yaml: $(cat "${TARGET}/${file}.yaml")"
              bashio::log.trace "yq output: $(/tmp/yq e -N -M -o=json "${TARGET}/${file}.yaml")"
              /tmp/yq e -N -M -o=json "${TARGET}/${file}.yaml" | tee "${TARGET}/${file}.json"
            fi
          done
          bashio::log.trace "----- config.json -----"
          bashio::log.trace "$(cat "${TARGET}/config.json")"
          bashio::log.trace "----- build.json -----"
          bashio::log.trace "$(cat "${TARGET}/build.json")"

      - name: 🏭 Build ${{ matrix.architecture }} add-on - Edge
        uses: home-assistant/builder@master
        env:
          __BASHIO_LOG_LEVEL_TRACE: trace
        with:
          image: ${{ matrix.architecture }}
          args: |
            --${{ matrix.architecture }} \
            --target "${TARGET}" \
            --version edge \
            --no-latest \
            --image "${{ needs.information.outputs.slug }}/{arch}" \
            --docker-hub "ghcr.io/${{ github.repository_owner }}" \
            --test \
            --addon
